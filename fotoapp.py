# -*- coding: utf-8 -*-
"""fotoapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1soQJwxZ_pL9jxlCEE8HQsOjmUDLfhU60

Modulo Fotoapp.py - Domenico Alejandro

Punto 1 - Redimensionar
"""

from PIL import Image
import os

def redimensionar_imagen(ruta, plataforma):

    dimensiones = {
        "Youtube": (1280, 720),
        "Instagram": (1080, 1080),
        "Twitter": (1200, 675),
        "Facebook": (1200, 630)
    }

    # Verifico si la ruta existe
    if not os.path.isfile(ruta):
        print(f"Error: No se encontró la imagen en la ruta especificada: {ruta}")
        return  # Finalizo la función sin continuar

    # Verifico si la plataforma es válida
    if plataforma not in dimensiones:
        print("Plataforma no válida. Use 'Youtube', 'Instagram', 'Twitter' o 'Facebook'.")
        return  # Finalizo la función sin continuar

    # Cargo la imagen
    img = Image.open(ruta)

    # Obtengo las dimensiones de la plataforma deseada
    ancho_deseado, alto_deseado = dimensiones[plataforma]

    # Obtengo la relación de aspecto de la imagen
    relacion_aspecto = img.width / img.height

    # Determino el nuevo tamaño manteniendo la escala
    if (ancho_deseado / alto_deseado) > relacion_aspecto:
        nuevo_ancho = int(alto_deseado * relacion_aspecto)
        nuevo_alto = alto_deseado
    else:
        nuevo_ancho = ancho_deseado
        nuevo_alto = int(ancho_deseado / relacion_aspecto)

    # Redimensionamos la imagen
    img_redimensionada = img.resize((nuevo_ancho, nuevo_alto))

    # Mostrar la imagen redimensionada
    img_redimensionada.show()
    #img_redimensionada.save('redimensionada_para_'+plataforma+'.png')  # Guardamos la imagen si es necesario

    return img_redimensionada

"""PUNTO 2 - Ajuste de contraste"""

import os
import cv2
import numpy as np
from matplotlib import pyplot as plt

def ajustar_contraste(ruta_imagen):
   # Verifico si la ruta existe
    if not os.path.isfile(ruta_imagen):
        print(f"Error: No se encontró la imagen en la ruta especificada: {ruta}")
        return  # Finalizo la función sin continuar
    img = cv2.imread(ruta_imagen, cv2.IMREAD_GRAYSCALE)
    img_ecualizada = cv2.equalizeHist(img)

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title("Original  en escala de grises")
    plt.imshow(img, cmap='gray')

    plt.subplot(1, 2, 2)
    plt.title("Ecualizada")
    plt.imshow(img_ecualizada, cmap='gray')

    plt.savefig("contraste_ajustado.png")
    plt.show()

"""3 - Filtros"""

from PIL import Image, ImageFilter
import matplotlib.pyplot as plt
import os

def aplicar_filtro(ruta_imagen, filtro_elegido):
    # filtros de Pillow
    filtros = {
        'BLUR': ImageFilter.BLUR,
        'CONTOUR': ImageFilter.CONTOUR,
        'DETAIL': ImageFilter.DETAIL,
        'EDGE_ENHANCE': ImageFilter.EDGE_ENHANCE,
        'EDGE_ENHANCE_MORE': ImageFilter.EDGE_ENHANCE_MORE,
        'EMBOSS': ImageFilter.EMBOSS,
        'FIND_EDGES': ImageFilter.FIND_EDGES,
        'SHARPEN': ImageFilter.SHARPEN,
        'SMOOTH': ImageFilter.SMOOTH
    }

    # Verificar si el filtro elegido es válido
    if filtro_elegido not in filtros:
        print("Filtro no reconocido. Use uno de los siguientes: 'BLUR', 'CONTOUR', 'DETAIL', 'EDGE_ENHANCE', 'EDGE_ENHANCE_MORE', 'EMBOSS', 'FIND_EDGES', 'SHARPEN', 'SMOOTH'.")
        return  # Finalizo la función sin continuar

    # Verifico si la ruta existe
    if not os.path.isfile(ruta_imagen):
        print(f"Error: No se encontró la imagen en la ruta especificada: {ruta_imagen}")
        return  # Finalizo la función sin continuar


    # Abro la imagen
    with Image.open(ruta_imagen) as img:
        # Aplicar el filtro elegido y guardar la imagen
        img_filtrada = img.filter(filtros[filtro_elegido])
        img_filtrada.save(f"imagen_{filtro_elegido}.png")
        print(f"Imagen con filtro {filtro_elegido} guardada como imagen_{filtro_elegido}.png")

        # Crear una figura para mostrar la imagen original y las versiones filtradas
        fig, axes = plt.subplots(2, 5, figsize=(15, 6))
        fig.suptitle("Imagen Original y Aplicación de Filtros", fontsize=16)

        # Mostrar la imagen original
        axes[0, 0].imshow(img)
        axes[0, 0].set_title("Original", color="black", fontsize=10)
        axes[0, 0].axis("off")

        # Aplicar y mostrar cada filtro
        for i, (nombre_filtro, filtro) in enumerate(filtros.items()):
            img_con_filtro = img.filter(filtro)
            row, col = divmod(i + 1, 5)  # Calcular posición en la cuadrícula

            # Mostrar la imagen con el filtro aplicado
            axes[row, col].imshow(img_con_filtro)
            # Resaltar el título del filtro elegido en rojo
            color_titulo = "red" if nombre_filtro == filtro_elegido else "black"
            axes[row, col].set_title(nombre_filtro, color=color_titulo, fontsize=10)
            axes[row, col].axis("off")

            # Guardar cada imagen filtrada individualmente
            img_con_filtro.save(f"imagen_{nombre_filtro}.png")

        # Guardar la figura con todos los filtros
        plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Deja espacio para el título
        fig.savefig("todos_los_filtros.png")
        plt.show()
        print("Imagen con todos los filtros guardada como todos_los_filtros.png")

"""4- Boceto"""

import cv2
import matplotlib.pyplot as plt

def generar_boceto(ruta_imagen, persona=True):
    # Verifico si la imagen contiene una persona
    if not persona:
        print("La imagen no contiene una persona, no se generará un boceto.")
        return

    # Leo la imagen en escala de grises
    img = cv2.imread(ruta_imagen, cv2.IMREAD_GRAYSCALE)
    if img is None:
        print("Error: No se pudo cargar la imagen. Verifique la ruta.")
        return

    # Invertir la imagen
    img_invertida = 255 - img

    # Aplico desenfoque gaussiano
    img_borroso = cv2.GaussianBlur(img_invertida, (21, 21), 0)

    # Creo el boceto dividiendo la imagen original por la imagen borrosa invertida
    boceto = cv2.divide(img, 255 - img_borroso, scale=256)

    # Guardo el boceto como archivo
    cv2.imwrite("boceto_generado.png", boceto)
    print("Boceto generado guardado como boceto_generado.png")

    # Mostrar la imagen original y el boceto
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title("Original en escala de grises")
    plt.imshow(img, cmap='gray')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.title("Boceto")
    plt.imshow(boceto, cmap='gray')
    plt.axis('off')

    plt.show()

"""5- Menu"""

def menu():
    imagen_cargada = False
    ruta = ""
    while True:
        print("\n--- Menú de Opciones ---")
        print("1. Redimensionar imagen para redes sociales.")
        print("2. Ajustar contraste de la imagen.")
        print("3. Aplicar filtro a la imagen.")
        print("4. Generar boceto de la imagen.")
        print("5. Salir.")

        opcion = input("\nSeleccione una opción (1-5): ")
        print()  
        try:
            if opcion == '1':
                ruta = input("Ingrese la ruta de la imagen: ")
                plataforma = input("Ingrese la plataforma (Youtube, Instagram, Twitter, Facebook): ")
                redimensionar_imagen(ruta, plataforma)
                imagen_cargada = True
                print("\nImagen redimensionada correctamente. Puede continuar con otras opciones.")
            elif opcion in ['2', '3', '4']:
                if not imagen_cargada:
                    print("\nDebe redimensionar una imagen primero (opción 1) antes de continuar.")
                    continue
                if opcion == '2':
                    ajustar_contraste(ruta)
                    print("\nContraste ajustado correctamente.")
                elif opcion == '3':
                    filtro = input("Ingrese el nombre del filtro (por ejemplo, BLUR, CONTOUR,'DETAIL', 'EDGE_ENHANCE', 'EDGE_ENHANCE_MORE', 'EMBOSS', 'FIND_EDGES', 'SHARPEN', 'SMOOTH' ")
                    aplicar_filtro(ruta, filtro)
                    print(f"\nFiltro '{filtro}' aplicado correctamente.")
                elif opcion == '4':
                    generar_boceto(ruta)
                    print("\nBoceto generado correctamente.")
            elif opcion == '5':
                print("\nSaliendo del programa. ¡Gracias por usar FotoApp el mejor programa para usted!")
                break
            else:
                print("\nOpción no válida, por favor intente nuevamente.")
        except Exception as e:
            print(f"\nError: {e}")
            print("\nPor favor, intente nuevamente.")
